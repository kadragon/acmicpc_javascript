{
  "custom input": {
    "scope": "javascript",
    "prefix": "js_0_solve",
    "body": [
      "const solution = (input) => {}",
      "",
      "const inputPath = process.platform === 'linux' ? '/dev/stdin' : __dirname + '/input.txt';",
      "const input = require('fs').readFileSync(inputPath, 'utf-8').toString().trim();",
      "",
      "console.log(solution(input));"
    ]
  },
  "javascriptHeap": {
    "scope": "javascript",
    "prefix": "js_heap",
    "body": [
      "class Heap {",
      "  constructor(compare) {",
      "    this.heap = [null];",
      "    this.compare = compare;",
      "  }",
      "",
      "  size() {",
      "    return this.heap.length - 1;",
      "  }",
      "",
      "  empty() {",
      "    return this.size() === 0;",
      "  }",
      "",
      "  top() {",
      "    if (this.empty()) return undefined;",
      "    return this.heap[1];",
      "  }",
      "",
      "  swap(a, b) {",
      "    [this.heap[a], this.heap[b]] = [this.heap[b], this.heap[a]];",
      "  }",
      "",
      "  push(item) {",
      "    this.heap.push(item);",
      "    let index = this.size();",
      "    let parent = Math.floor(index / 2);",
      "    while (index > 1 && this.compare(this.heap[index], this.heap[parent])) {",
      "      this.swap(index, parent);",
      "      index = parent;",
      "      parent = Math.floor(index / 2);",
      "    }",
      "  }",
      "",
      "  pop() {",
      "    if (this.empty()) return undefined;",
      "    if (this.size() === 1) return this.heap.pop();",
      "",
      "    const item = this.top();",
      "    this.heap[1] = this.heap.pop();",
      "    let index = 1;",
      "    let left = index * 2;",
      "    let right = index * 2 + 1;",
      "    while (left <= this.size()) {",
      "      let target = index;",
      "      if (this.compare(this.heap[left], this.heap[target])) {",
      "        target = left;",
      "      }",
      "      if (",
      "        right <= this.size() &&",
      "        this.compare(this.heap[right], this.heap[target])",
      "      ) {",
      "        target = right;",
      "      }",
      "      if (target === index) break;",
      "      this.swap(index, target);",
      "      index = target;",
      "      left = index * 2;",
      "      right = index * 2 + 1;",
      "    }",
      "",
      "    return item;",
      "  }",
      "}"
    ]
  }
}
